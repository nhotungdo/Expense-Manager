@page
@model MoneyTracker.Pages.Admin.DashboardModel
@{
    ViewData["Title"] = "Admin Dashboard - Money Tracking";
}

@section Styles {
    <link rel="stylesheet" href="~/css/admin-dashboard.css" asp-append-version="true" />
}

<div class="admin-dashboard-container">
    <!-- Header -->
    <div class="admin-header">
        <div>
            <h1>Admin Dashboard</h1>
            <p>Quản lý hệ thống và người dùng Money Tracking</p>
        </div>
        <div class="admin-actions">
            <button class="admin-btn admin-btn-primary" onclick="refreshAdminDashboard()">
                <i class="fas fa-sync-alt"></i> Làm mới
            </button>
            <button class="admin-btn admin-btn-success" onclick="exportSystemReport()">
                <i class="fas fa-download"></i> Xuất báo cáo
            </button>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="stats-grid">
        <div class="stat-card users">
            <div class="stat-header">
                <div class="stat-title">Tổng người dùng</div>
                <div class="stat-icon users">
                    <i class="fas fa-users"></i>
                </div>
            </div>
            <div class="stat-value" id="totalUsers">0</div>
            <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i>
                <span>+12% so với tháng trước</span>
            </div>
        </div>
        <div class="stat-card active">
            <div class="stat-header">
                <div class="stat-title">User hoạt động</div>
                <div class="stat-icon active">
                    <i class="fas fa-user-check"></i>
                </div>
            </div>
            <div class="stat-value" id="activeUsers">0</div>
            <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i>
                <span>+8% so với tuần trước</span>
            </div>
        </div>
        <div class="stat-card new">
            <div class="stat-header">
                <div class="stat-title">User mới (7 ngày)</div>
                <div class="stat-icon new">
                    <i class="fas fa-user-plus"></i>
                </div>
            </div>
            <div class="stat-value" id="newUsers">0</div>
            <div class="stat-change positive">
                <i class="fas fa-arrow-up"></i>
                <span>+5 người mới</span>
            </div>
        </div>
        <div class="stat-card ai">
            <div class="stat-header">
                <div class="stat-title">Gợi ý AI</div>
                <div class="stat-icon ai">
                    <i class="fas fa-robot"></i>
                </div>
            </div>
            <div class="stat-value" id="totalAISuggestions">0</div>
            <div class="stat-change neutral">
                <i class="fas fa-minus"></i>
                <span>Không thay đổi</span>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="charts-section">
        <!-- User Registration Chart -->
        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-title">
                    <div class="chart-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    Đăng ký người dùng theo tháng
                </div>
                <div class="chart-actions">
                    <button class="chart-btn">Xuất</button>
                    <button class="chart-btn">Làm mới</button>
                </div>
            </div>
            <canvas id="userRegistrationChart" height="300"></canvas>
        </div>

        <!-- System Activity Chart -->
        <div class="chart-card">
            <div class="chart-header">
                <div class="chart-title">
                    <div class="chart-icon">
                        <i class="fas fa-chart-bar"></i>
                    </div>
                    Hoạt động hệ thống
                </div>
                <div class="chart-actions">
                    <button class="chart-btn">Xuất</button>
                    <button class="chart-btn">Làm mới</button>
                </div>
            </div>
            <canvas id="systemActivityChart" height="300"></canvas>
        </div>
    </div>

    <!-- Management Section -->
    <div class="management-section">
        <!-- User Management -->
        <div class="management-card">
            <div class="management-header">
                <div class="management-title">
                    <i class="fas fa-users"></i>
                    Quản lý người dùng
                </div>
                <div class="management-actions">
                    <button class="management-btn" onclick="loadUsers()">
                        <i class="fas fa-sync-alt"></i>
                        Làm mới
                    </button>
                    <a href="/Admin/Users" class="management-btn management-btn primary">
                        <i class="fas fa-eye"></i>
                        Xem tất cả
                    </a>
                </div>
            </div>
            <div class="management-content">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Người dùng</th>
                            <th>Email</th>
                            <th>Vai trò</th>
                            <th>Trạng thái</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Users will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- AI Suggestions Monitoring -->
        <div class="management-card">
            <div class="management-header">
                <div class="management-title">
                    <i class="fas fa-robot"></i>
                    Gợi ý AI gần nhất
                </div>
                <div class="management-actions">
                    <button class="management-btn" onclick="loadAISuggestions()">
                        <i class="fas fa-sync-alt"></i>
                        Làm mới
                    </button>
                </div>
            </div>
            <div class="management-content">
                <div id="aiSuggestionsList">
                    <!-- AI suggestions will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- System Management -->
    <div class="row mb-4">
        <!-- Global Categories Management -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-tags me-2"></i>Quản lý danh mục toàn cục
                    </h5>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="loadGlobalCategories()">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-success" onclick="showAddCategoryModal()">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Tên danh mục</th>
                                    <th>Loại</th>
                                    <th>Mô tả</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody id="globalCategoriesTable">
                                <!-- Global categories will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- System Logs -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-clipboard-list me-2"></i>Nhật ký hệ thống
                    </h5>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="loadSystemLogs()">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                        <button class="btn btn-sm btn-info" onclick="downloadLogs()">
                            <i class="fas fa-download"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Thời gian</th>
                                    <th>Loại</th>
                                    <th>Mô tả</th>
                                </tr>
                            </thead>
                            <tbody id="systemLogsTable">
                                <!-- System logs will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions-section">
        <div class="quick-actions-grid">
            <a href="/Admin/Users" class="quick-action-card">
                <div class="quick-action-icon users">
                    <i class="fas fa-users"></i>
                </div>
                <div class="quick-action-title">Quản lý người dùng</div>
                <div class="quick-action-desc">Xem và quản lý tất cả người dùng</div>
            </a>
            <button class="quick-action-card" onclick="showAddCategoryModal()">
                <div class="quick-action-icon categories">
                    <i class="fas fa-tags"></i>
                </div>
                <div class="quick-action-title">Thêm danh mục</div>
                <div class="quick-action-desc">Tạo danh mục mới cho hệ thống</div>
            </button>
            <button class="quick-action-card" onclick="loadSystemLogs()">
                <div class="quick-action-icon logs">
                    <i class="fas fa-clipboard-list"></i>
                </div>
                <div class="quick-action-title">Xem nhật ký</div>
                <div class="quick-action-desc">Theo dõi hoạt động hệ thống</div>
            </button>
            <button class="quick-action-card" onclick="exportSystemReport()">
                <div class="quick-action-icon reports">
                    <i class="fas fa-file-export"></i>
                </div>
                <div class="quick-action-title">Xuất báo cáo</div>
                <div class="quick-action-desc">Tạo báo cáo tổng hợp</div>
            </button>
        </div>
    </div>
</div>

<!-- Add Category Modal -->
<div class="modal fade" id="addCategoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Thêm danh mục toàn cục</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addCategoryForm">
                    <div class="mb-3">
                        <label class="form-label">Tên danh mục</label>
                        <input type="text" class="form-control" id="categoryName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Loại</label>
                        <select class="form-control" id="categoryType" required>
                            <option value="">Chọn loại</option>
                            <option value="Expense">Chi tiêu</option>
                            <option value="Income">Thu nhập</option>
                            <option value="Both">Cả hai</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Mô tả</label>
                        <textarea class="form-control" id="categoryDescription" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" onclick="saveCategory()">Lưu</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let adminDashboardData = {};
        let userRegistrationChart = null;
        let systemActivityChart = null;

        $(document).ready(function () {
            // For testing, load admin dashboard data directly
            loadAdminDashboardData();
        });

        async function loadAdminDashboardData() {
            try {
                // For testing, use mock data instead of API call
                const mockData = {
                    totalUsers: 1250,
                    activeUsers: 980,
                    newUsers: 45,
                    totalAISuggestions: 320,
                    userRegistrationData: [
                        { month: 'Tháng 1', count: 120 },
                        { month: 'Tháng 2', count: 150 },
                        { month: 'Tháng 3', count: 180 },
                        { month: 'Tháng 4', count: 200 },
                        { month: 'Tháng 5', count: 220 },
                        { month: 'Tháng 6', count: 250 }
                    ],
                    systemActivityData: [
                        { type: 'Đăng nhập', count: 1250 },
                        { type: 'Giao dịch', count: 3200 },
                        { type: 'Gợi ý AI', count: 320 },
                        { type: 'Báo cáo', count: 150 }
                    ]
                };

                adminDashboardData = mockData;
                updateAdminDashboardUI();
                createAdminCharts();
                loadUsers();
                loadAISuggestions();
                loadGlobalCategories();
                loadSystemLogs();
            } catch (error) {
                console.error('Error loading admin dashboard data:', error);
            }
        }

        function updateAdminDashboardUI() {
            document.getElementById('totalUsers').textContent = adminDashboardData.totalUsers || 0;
            document.getElementById('activeUsers').textContent = adminDashboardData.activeUsers || 0;
            document.getElementById('newUsers').textContent = adminDashboardData.newUsers || 0;
            document.getElementById('totalAISuggestions').textContent = adminDashboardData.totalAISuggestions || 0;
        }

        function createAdminCharts() {
            // User Registration Chart
            const registrationCtx = document.getElementById('userRegistrationChart').getContext('2d');
            if (userRegistrationChart) {
                userRegistrationChart.destroy();
            }

            const registrationData = adminDashboardData.userRegistrationData || [];
            userRegistrationChart = new Chart(registrationCtx, {
                type: 'line',
                data: {
                    labels: registrationData.map(item => item.month),
                    datasets: [{
                        label: 'Đăng ký mới',
                        data: registrationData.map(item => item.count),
                        borderColor: '#007bff',
                        backgroundColor: 'rgba(0, 123, 255, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // System Activity Chart
            const activityCtx = document.getElementById('systemActivityChart').getContext('2d');
            if (systemActivityChart) {
                systemActivityChart.destroy();
            }

            const activityData = adminDashboardData.systemActivityData || [];
            systemActivityChart = new Chart(activityCtx, {
                type: 'bar',
                data: {
                    labels: activityData.map(item => item.type),
                    datasets: [{
                        label: 'Số lượng',
                        data: activityData.map(item => item.count),
                        backgroundColor: [
                            '#28a745', '#dc3545', '#ffc107', '#17a2b8', '#6f42c1'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        async function loadUsers() {
            try {
                // Mock data for testing
                const mockUsers = [
                    {
                        id: 1,
                        fullName: 'Nguyễn Văn A',
                        username: 'nguyenvana',
                        email: 'nguyenvana@example.com',
                        role: 'USER',
                        enabled: true,
                        pictureUrl: null
                    },
                    {
                        id: 2,
                        fullName: 'Trần Thị B',
                        username: 'tranthib',
                        email: 'tranthib@example.com',
                        role: 'ADMIN',
                        enabled: true,
                        pictureUrl: null
                    },
                    {
                        id: 3,
                        fullName: 'Lê Văn C',
                        username: 'levanc',
                        email: 'levanc@example.com',
                        role: 'USER',
                        enabled: false,
                        pictureUrl: null
                    }
                ];
                displayUsers(mockUsers);
            } catch (error) {
                console.error('Error loading users:', error);
            }
        }

        function displayUsers(users) {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = '';

            if (users.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">Chưa có người dùng nào</td></tr>';
                return;
            }

            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                        <td>
                            <div style="display: flex; align-items: center; gap: 12px;">
                                <img src="${user.pictureUrl || '/images/default-avatar.png'}" 
                                     alt="Avatar" class="user-avatar">
                                <div class="user-info">
                                    <div class="user-name">${user.fullName || user.username}</div>
                                    <div class="user-username">@@${user.username}</div>
                                </div>
                            </div>
                        </td>
                        <td>${user.email}</td>
                        <td>
                            <span class="badge ${user.role === 'ADMIN' ? 'badge-admin' : 'badge-user'}">
                                ${user.role}
                            </span>
                        </td>
                        <td>
                            <span class="badge ${user.enabled ? 'badge-active' : 'badge-inactive'}">
                                ${user.enabled ? 'Hoạt động' : 'Vô hiệu hóa'}
                            </span>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="action-btn edit" onclick="editUser(${user.id})">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="action-btn toggle" onclick="toggleUserStatus(${user.id}, ${user.enabled})">
                                    <i class="fas fa-${user.enabled ? 'ban' : 'check'}"></i>
                                </button>
                            </div>
                        </td>
                    `;
                tbody.appendChild(row);
            });
        }

        async function loadAISuggestions() {
            try {
                // Mock data for testing
                const mockSuggestions = [
                    {
                        suggestion: 'Người dùng có thể tiết kiệm 15% chi phí ăn uống bằng cách nấu ăn tại nhà',
                        createdAt: '2024-01-15T10:30:00Z'
                    },
                    {
                        suggestion: 'Gợi ý đầu tư vào quỹ ETF với lãi suất 8% mỗi năm',
                        createdAt: '2024-01-14T15:45:00Z'
                    },
                    {
                        suggestion: 'Tạo ngân sách hàng tháng để kiểm soát chi tiêu tốt hơn',
                        createdAt: '2024-01-13T09:20:00Z'
                    }
                ];
                displayAISuggestions(mockSuggestions);
            } catch (error) {
                console.error('Error loading AI suggestions:', error);
            }
        }

        function displayAISuggestions(suggestions) {
            const container = document.getElementById('aiSuggestionsList');
            container.innerHTML = '';

            if (suggestions.length === 0) {
                container.innerHTML = '<p class="text-muted text-center">Chưa có gợi ý AI nào</p>';
                return;
            }

            suggestions.forEach(suggestion => {
                const suggestionDiv = document.createElement('div');
                suggestionDiv.className = 'ai-suggestion';
                suggestionDiv.innerHTML = `
                        <div class="ai-suggestion-content">
                            <div class="ai-suggestion-text">
                                <i class="fas fa-lightbulb" style="margin-right: 8px; color: #f59e0b;"></i>
                                ${suggestion.suggestion}
                            </div>
                            <div class="ai-suggestion-time">${formatDate(suggestion.createdAt)}</div>
                        </div>
                    `;
                container.appendChild(suggestionDiv);
            });
        }

        async function loadGlobalCategories() {
            try {
                // Mock data for testing
                const mockCategories = [
                    { id: 1, name: 'Ăn uống', type: 'Expense', description: 'Chi phí ăn uống hàng ngày' },
                    { id: 2, name: 'Lương', type: 'Income', description: 'Thu nhập từ lương' },
                    { id: 3, name: 'Xăng xe', type: 'Expense', description: 'Chi phí nhiên liệu' },
                    { id: 4, name: 'Đầu tư', type: 'Both', description: 'Cả thu nhập và chi tiêu đầu tư' }
                ];
                displayGlobalCategories(mockCategories);
            } catch (error) {
                console.error('Error loading global categories:', error);
            }
        }

        function displayGlobalCategories(categories) {
            const tbody = document.getElementById('globalCategoriesTable');
            tbody.innerHTML = '';

            if (categories.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">Chưa có danh mục nào</td></tr>';
                return;
            }

            categories.forEach(category => {
                const row = document.createElement('tr');
                row.innerHTML = `
                                    <td>${category.name}</td>
                                    <td>
                                        <span class="badge bg-${category.type === 'Income' ? 'success' : category.type === 'Expense' ? 'danger' : 'info'}">
                                            ${category.type}
                                        </span>
                                    </td>
                                    <td>${category.description || '-'}</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" onclick="editCategory(${category.id})">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" onclick="deleteCategory(${category.id})">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                `;
                tbody.appendChild(row);
            });
        }

        async function loadSystemLogs() {
            try {
                // Mock data for testing
                const mockLogs = [
                    { timestamp: '2024-01-15T10:30:00Z', type: 'INFO', description: 'User đăng nhập thành công' },
                    { timestamp: '2024-01-15T10:25:00Z', type: 'WARNING', description: 'Tốc độ phản hồi API chậm' },
                    { timestamp: '2024-01-15T10:20:00Z', type: 'SUCCESS', description: 'Backup dữ liệu hoàn tất' },
                    { timestamp: '2024-01-15T10:15:00Z', type: 'ERROR', description: 'Lỗi kết nối database' },
                    { timestamp: '2024-01-15T10:10:00Z', type: 'INFO', description: 'Hệ thống khởi động' }
                ];
                displaySystemLogs(mockLogs);
            } catch (error) {
                console.error('Error loading system logs:', error);
            }
        }

        function displaySystemLogs(logs) {
            const tbody = document.getElementById('systemLogsTable');
            tbody.innerHTML = '';

            if (logs.length === 0) {
                tbody.innerHTML = '<tr><td colspan="3" class="text-center text-muted">Chưa có nhật ký nào</td></tr>';
                return;
            }

            logs.forEach(log => {
                const row = document.createElement('tr');
                row.innerHTML = `
                                    <td>${formatDateTime(log.timestamp)}</td>
                                    <td>
                                        <span class="badge bg-${getLogTypeColor(log.type)}">
                                            ${log.type}
                                        </span>
                                    </td>
                                    <td>${log.description}</td>
                                `;
                tbody.appendChild(row);
            });
        }

        function showAddCategoryModal() {
            const modal = new bootstrap.Modal(document.getElementById('addCategoryModal'));
            modal.show();
        }

        async function saveCategory() {
            const form = document.getElementById('addCategoryForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const categoryData = {
                name: document.getElementById('categoryName').value,
                type: document.getElementById('categoryType').value,
                description: document.getElementById('categoryDescription').value
            };

            try {
                const response = await fetch('/api/admin/categories', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + getToken()
                    },
                    body: JSON.stringify(categoryData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addCategoryModal'));
                    modal.hide();
                    form.reset();
                    loadGlobalCategories();
                } else {
                    alert('Có lỗi xảy ra khi lưu danh mục');
                }
            } catch (error) {
                console.error('Error saving category:', error);
                alert('Có lỗi xảy ra khi lưu danh mục');
            }
        }

        function refreshAdminDashboard() {
            loadAdminDashboardData();
        }

        function exportSystemReport() {
            // TODO: Implement export functionality
            alert('Chức năng xuất báo cáo sẽ được cập nhật');
        }

        function downloadLogs() {
            // TODO: Implement log download
            alert('Chức năng tải nhật ký sẽ được cập nhật');
        }

        function getLogTypeColor(type) {
            switch (type) {
                case 'INFO': return 'info';
                case 'WARNING': return 'warning';
                case 'ERROR': return 'danger';
                case 'SUCCESS': return 'success';
                default: return 'secondary';
            }
        }

        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('vi-VN');
        }

        function formatDateTime(dateString) {
            return new Date(dateString).toLocaleString('vi-VN');
        }

        function getToken() {
            return localStorage.getItem('authToken') || '';
        }
    </script>
}
